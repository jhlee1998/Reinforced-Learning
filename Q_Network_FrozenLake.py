# -*- coding: utf-8 -*-
"""Q_Network_Frozen Lake.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1mvFVrIKg3voGZf4JqAB-JEV9Wp_yrJNh
"""

import gym
import numpy as np
import tensorflow as tf
!pip install matplotlib-venn
import matplotlib.pyplot as plt

env = gym.make('FrozenLake-v0')

input_size = env.observation_space.n
output_size = env.action_space.n
learning_rate = 0.1

print(input_size)

import tensorflow.compat.v1 as tf
tf.disable_v2_behavior() 

X = tf.placeholder(shape=[1, input_size], dtype = tf.float32)
W = tf.Variable(tf.random.uniform([input_size, output_size], 0,0.01))

def one_hot(x):
  return np.identity(16)[x:x+1]

Qpred = tf.matmul(X, W)
Y = tf.placeholder(shape=[1, output_size], dtype = tf.float32)

loss = tf.reduce_sum(tf.square(Y-Qpred))

train = tf.train.GradientDescentOptimizer(learning_rate=learning_rate).minimize(loss)

dis = 0.99
num_episodes = 2000

learning_rate = 0.5

rList = []

init = tf.global_variables_initializer()
with tf.Session() as sess:
  sess.run(init)
  for i in range(num_episodes):
    s = env.reset()
    e = 1. / ((i/50) + 10)
    rAll = 0
    done = False
    local_loss = []

    while not done:
      Qs = sess.run(Qpred, feed_dict={X: one_hot(s)})
      
      if np.random.rand(1) < e:
        a = env.action_space.sample()
      else: 
        a = np.argmax(Qs)
      s1, reward, done, _ = env.step(a)

      if done:
        Qs[0,a] = reward
      else:
        Qs1 = sess.run(Qpred, feed_dict={X: one_hot(s1)})
        #Qs[0,a] = reward + dis * np.max(Qs1)
        Qs[0,a] = (1-learning_rate) * Qs[0, a] + learning_rate*(reward + dis * np.max(Qs1))

      # print(s, s1, a, Qs)
      sess.run(train, feed_dict = {X: one_hot(s), Y: Qs})

      rAll += reward
      s = s1
    rList.append(rAll)

print("Percent of successful episodes: " + str(sum(rList) / num_episodes) + "%")
plt.bar(range(len(rList)), rList, color = "blue")
plt.show